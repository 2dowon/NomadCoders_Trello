{"version":3,"sources":["atoms.tsx","Components/DragabbleCard.tsx","Components/Board.tsx","App.tsx","index.tsx","theme.ts"],"names":["toDoState","atom","key","default","Doing","Done","Card","styled","div","props","theme","cardColor","isDragging","TextBox","DeleteBtn","button","DragabbleCard","toDoId","toDoText","index","boardId","useRecoilState","toDos","setToDos","draggableId","magic","snapshot","ref","innerRef","dragHandleProps","draggableProps","onClick","boardTodos","filter","todo","id","allBoards","onDeleteCard","className","React","memo","Wrapper","boardColor","Title","h2","Area","isDraggingOver","isDraggingFromThis","Form","form","Board","recoilToDos","useForm","register","setValue","handleSubmit","onValid","toDo","newToDo","Date","now","text","onSubmit","required","type","placeholder","droppableId","Boolean","draggingFromThisWith","droppableProps","x","onDeleteBoard","map","Boards","AddForm","App","useState","value","onDragEnd","info","destination","source","console","log","boardCopy","splice","boardsCopy","taskObj","sourceBoard","destinationBoard","event","preventDefault","onChange","currentTarget","Object","keys","GlobalStyle","createGlobalStyle","bgColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8518c628.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nexport interface ITodo {\n  id: number;\n  text: string;\n}\n\ninterface IToDoState {\n  [key: string]: ITodo[];\n}\n\nexport const toDoState = atom<IToDoState>({\n  key: \"toDo\",\n  default: {\n    \"To Do\": [],\n    Doing: [],\n    Done: [],\n  },\n});\n","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport { toDoState } from \"../atoms\";\nimport { useRecoilState } from \"recoil\";\n\nconst Card = styled.div<{ isDragging: boolean }>`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  word-break: break-all;\n  word-wrap: break-word;\n  position: relative;\n  border-radius: 5px;\n  margin-bottom: 5px;\n  padding: 10px 10px;\n  background-color: ${(props) => props.theme.cardColor};\n  padding: 10px;\n  background-color: ${(props) =>\n    props.isDragging ? \"#FDD20E\" : props.theme.cardColor};\n  box-shadow: ${(props) =>\n    props.isDragging ? \"0px 2px 5px rgba(0, 0, 0, 0.05)\" : \"none\"};\n`;\n\nconst TextBox = styled.div`\n  width: 90%;\n`;\n\nconst DeleteBtn = styled.button`\n  position: absolute;\n  right: 10px;\n  border: none;\n  background-color: transparent;\n  font-size: 10px;\n`;\n\ninterface IDragabbleCardProps {\n  toDoId: number;\n  toDoText: string;\n  index: number;\n  boardId: string;\n}\n\nfunction DragabbleCard({\n  toDoId,\n  toDoText,\n  index,\n  boardId,\n}: IDragabbleCardProps) {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n\n  const onDeleteCard = (toDoId: number) => {\n    const boardTodos = { ...toDos }[boardId].filter(\n      (todo) => todo.id !== toDoId\n    );\n    setToDos((allBoards) => {\n      return { ...allBoards, [boardId]: boardTodos };\n    });\n  };\n\n  return (\n    <Draggable draggableId={toDoId + \"\"} index={index}>\n      {(magic, snapshot) => (\n        <Card\n          isDragging={snapshot.isDragging}\n          ref={magic.innerRef}\n          {...magic.dragHandleProps}\n          {...magic.draggableProps}\n        >\n          <TextBox>{toDoText}</TextBox>\n          <DeleteBtn\n            onClick={() => {\n              onDeleteCard(toDoId);\n            }}\n          >\n            <i className=\"fas fa-times\"></i>\n          </DeleteBtn>\n        </Card>\n      )}\n    </Draggable>\n  );\n}\n\nexport default React.memo(DragabbleCard);\n","import { useForm } from \"react-hook-form\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport DragabbleCard from \"./DragabbleCard\";\nimport { ITodo, toDoState } from \"../atoms\";\nimport { useRecoilState } from \"recoil\";\n\nconst Wrapper = styled.div<{ isDragging: boolean }>`\n  width: 300px;\n  padding-top: 20px;\n  background-color: ${(props) => props.theme.boardColor};\n  border-radius: 5px;\n  min-height: 300px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  position: relative;\n`;\n\nconst Title = styled.h2`\n  text-align: center;\n  font-weight: 600;\n  margin-bottom: 10px;\n  font-size: 18px;\n`;\n\ninterface IAreaProps {\n  isDraggingFromThis: boolean;\n  isDraggingOver: boolean;\n}\n\nconst Area = styled.div<IAreaProps>`\n  background-color: ${(props) =>\n    props.isDraggingOver\n      ? \"#dfe6e9\"\n      : props.isDraggingFromThis\n      ? \"#b2bec3\"\n      : \"transparent\"};\n  flex-grow: 1;\n  transition: background-color 0.3s ease-in-out;\n  padding: 20px;\n`;\n\nconst Form = styled.form`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  padding-bottom: 10px;\n  input {\n    font-size: 16px;\n    border: 0;\n    background-color: white;\n    width: 80%;\n    padding: 10px;\n    border-radius: 5px;\n    text-align: center;\n    margin: 0 auto;\n  }\n`;\n\nconst DeleteBtn = styled.button`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  border: none;\n  background-color: transparent;\n`;\n\ninterface IBoardProps {\n  toDos: ITodo[];\n  boardId: string;\n  index: number;\n}\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction Board({ toDos, boardId, index }: IBoardProps) {\n  const [recoilToDos, setToDos] = useRecoilState(toDoState);\n  const { register, setValue, handleSubmit } = useForm<IForm>();\n  const onValid = ({ toDo }: IForm) => {\n    const newToDo = {\n      id: Date.now(),\n      text: toDo,\n    };\n    setToDos((allBoards) => {\n      return {\n        ...allBoards,\n        [boardId]: [newToDo, ...allBoards[boardId]],\n      };\n    });\n    setValue(\"toDo\", \"\");\n  };\n\n  const onDeleteBoard = (boardId: string) => {\n    const x = { ...recoilToDos };\n    delete x[boardId];\n    setToDos(x);\n  };\n\n  return (\n    <Draggable draggableId={boardId + \"\"} index={index}>\n      {(magic, snapshot) => (\n        <Wrapper\n          isDragging={snapshot.isDragging}\n          ref={magic.innerRef}\n          {...magic.dragHandleProps}\n          {...magic.draggableProps}\n        >\n          <Title>{boardId}</Title>\n          <Form onSubmit={handleSubmit(onValid)}>\n            <input\n              {...register(\"toDo\", { required: true })}\n              type=\"text\"\n              placeholder={`Add task on ${boardId}`}\n            />\n          </Form>\n          <Droppable droppableId={boardId}>\n            {(magic, snapshot) => (\n              <Area\n                isDraggingOver={snapshot.isDraggingOver}\n                isDraggingFromThis={Boolean(snapshot.draggingFromThisWith)}\n                ref={magic.innerRef}\n                {...magic.droppableProps}\n              >\n                <DeleteBtn\n                  onClick={() => {\n                    onDeleteBoard(boardId);\n                  }}\n                >\n                  <i className=\"fas fa-times\"></i>\n                </DeleteBtn>\n                {toDos.map((toDo, index) => (\n                  <DragabbleCard\n                    key={toDo.id}\n                    index={index}\n                    toDoId={toDo.id}\n                    toDoText={toDo.text}\n                    boardId={boardId}\n                  />\n                ))}\n                {magic.placeholder}\n              </Area>\n            )}\n          </Droppable>\n        </Wrapper>\n      )}\n    </Draggable>\n  );\n}\nexport default Board;\n","import { useState } from \"react\";\nimport { DragDropContext, DropResult, Droppable } from \"react-beautiful-dnd\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { toDoState } from \"./atoms\";\nimport Board from \"./Components/Board\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  margin: 0 auto;\n  justify-content: center;\n  align-items: center;\n  padding: 50px;\n`;\n\nconst Boards = styled.div<{ isDraggingOver: boolean }>`\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  flex-wrap: wrap;\n  width: 100%;\n  gap: 10px;\n  margin-top: 100px;\n`;\n\nconst AddForm = styled.form`\n  width: 100%;\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  padding: 50px 0;\n  background-color: #3f8cf3;\n  input {\n    width: 80%;\n    max-width: 300px;\n    font-size: 16px;\n    border: 0;\n    background-color: white;\n    padding: 15px 10px;\n    border-radius: 5px;\n    text-align: center;\n    margin: 0 auto;\n  }\n`;\n\ninterface IDeleteBtnProps {\n  isDraggingOver: boolean;\n}\n\nconst DeleteBtn = styled.div<IDeleteBtnProps>`\n  width: 70px;\n  height: 70px;\n  font-size: 30px;\n  color: ${(props) => (props.isDraggingOver ? \"red\" : \"white\")};\n  border: ${(props) =>\n    props.isDraggingOver ? \"2px solid red\" : \"2px solid white\"};\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: fixed;\n  bottom: 0;\n  left: 50%;\n  transition: transform 100ms ease-in;\n  transform: ${(props) =>\n    props.isDraggingOver\n      ? \"scale(1.1) translate(-50%, -50%)\"\n      : \"translate(-50%, -50%)\"};\n`;\n\nfunction App() {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const onDragEnd = (info: DropResult) => {\n    const { destination, source, draggableId } = info;\n    console.log(destination, source, draggableId);\n    if (!destination) return;\n    if (destination.droppableId === \"deleteBtn\") {\n      if (source.droppableId !== \"boards\") {\n        setToDos((allBoards) => {\n          const boardCopy = [...allBoards[source.droppableId]];\n          boardCopy.splice(source.index, 1);\n          return {\n            ...allBoards,\n            [source.droppableId]: boardCopy,\n          };\n        });\n        return;\n      } else {\n        const boardsCopy = { ...toDos };\n        delete boardsCopy[draggableId];\n        setToDos(boardsCopy);\n        return;\n      }\n    }\n\n    if (\n      source.droppableId !== \"boards\" &&\n      destination.droppableId !== \"boards\"\n    ) {\n      if (destination?.droppableId === source.droppableId) {\n        // same board movement.\n        setToDos((allBoards) => {\n          const boardCopy = [...allBoards[source.droppableId]];\n          const taskObj = boardCopy[source.index];\n          boardCopy.splice(source.index, 1);\n          boardCopy.splice(destination?.index, 0, taskObj);\n          return {\n            ...allBoards,\n            [source.droppableId]: boardCopy,\n          };\n        });\n      }\n      if (destination.droppableId !== source.droppableId) {\n        // cross board movement\n        setToDos((allBoards) => {\n          const sourceBoard = [...allBoards[source.droppableId]];\n          const taskObj = sourceBoard[source.index];\n          const destinationBoard = [...allBoards[destination.droppableId]];\n          sourceBoard.splice(source.index, 1);\n          destinationBoard.splice(destination?.index, 0, taskObj);\n          return {\n            ...allBoards,\n            [source.droppableId]: sourceBoard,\n            [destination.droppableId]: destinationBoard,\n          };\n        });\n      }\n    }\n  };\n\n  // 새로운 보드 추가\n  const [value, setValue] = useState<string>(\"\");\n  const onChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const {\n      currentTarget: { value },\n    } = event;\n    setValue(value);\n  };\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setToDos((allBoards) => {\n      return { ...allBoards, [value]: [] };\n    });\n    setValue(\"\");\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <AddForm onSubmit={onSubmit}>\n        <input\n          value={value}\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"Add New Board\"\n        />\n      </AddForm>\n      <Wrapper>\n        <Droppable droppableId=\"boards\">\n          {(magic, snapshot) => (\n            <Boards\n              isDraggingOver={snapshot.isDraggingOver}\n              ref={magic.innerRef}\n              {...magic.droppableProps}\n            >\n              {Object.keys(toDos).map((boardId, index) => (\n                <Board\n                  boardId={boardId}\n                  key={boardId}\n                  toDos={toDos[boardId]}\n                  index={index}\n                />\n              ))}\n            </Boards>\n          )}\n        </Droppable>\n      </Wrapper>\n      <Droppable droppableId=\"deleteBtn\">\n        {(magic, snapshot) => (\n          <DeleteBtn\n            isDraggingOver={snapshot.isDraggingOver}\n            ref={magic.innerRef}\n            {...magic.droppableProps}\n          >\n            <i className=\"fas fa-trash\"></i>\n          </DeleteBtn>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport { darkTheme } from \"./theme\";\nimport { createGlobalStyle } from \"styled-components\";\nimport \"@fortawesome/fontawesome-free/js/all.js\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:black;\n  line-height: 1.5;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#3F8CF2\",\n  boardColor: \"#DADFE9\",\n  cardColor: \"white\",\n};\n"],"sourceRoot":""}